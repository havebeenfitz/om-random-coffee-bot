from telegram import (
    error,
    ChatMember,
    ChatMemberBanned,
    ChatMemberLeft,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler

from src.handlers.common_handlers import *
from src.handlers.pair_handlers import *
from src.models.static_models import Command, MenuCallback, FeedbackCallback, RemoveProfileCallback
from src.vars import ADMIN_ACCOUNTS, FEEDBACK_CHAT_ID

logging.getLogger().setLevel('INFO')
db_helper = DBHelper()

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info('Getting chat member..')
        member = await _get_chat_member(update, context)
        logging.info('Done..')

        if (member is not None) and (member.status is not (ChatMember.LEFT or ChatMember.BANNED)):
            logging.info('Member is fine, show keyboard..')
            db_user = _get_db_user(update, context)

            if db_user is None:
                await update.message.reply_text(
                    text="–ü—Ä–∏–≤–µ—Ç, —è Random Coffee bot!\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∏–∂–µ. –ï—â–µ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                )

                menu_markup = _menu_buttons(context, member, db_user)

                await update.message.reply_text(
                    text='–ú–µ–Ω—é',
                    reply_markup=menu_markup
                )
            else:
                await update.message.reply_text(
                    text="–¢—ã —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª, –≤—ã–∑–æ–≤–∏ /menu, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
                )
        else:
            logging.info('Sending membership message request...')
            await send_membership_message(update, context)
            logging.info('Done')
    except error.BadRequest as e:
        logging.info('Bad request')
        logging.info(e)
        await send_membership_message(update, context)


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info('Getting chat member..')
        member = await _get_chat_member(update, context)
        logging.info('Done..')

        if (member is not None) and (member.status is not (ChatMember.LEFT or ChatMember.BANNED)):
            logging.info('Member is fine, show keyboard..')
            db_user = _get_db_user(update, context)
            reply_keyboard_markup = _menu_buttons(context, member, db_user)

            await update.message.reply_text(
                '–ú–µ–Ω—é',
                reply_markup=reply_keyboard_markup
            )

            logging.info('Keyboard shown')
        else:
            logging.info('Sending membership message request...')
            await send_membership_message(update, context)
            logging.info('Done')
    except error.BadRequest:
        logging.info('Bad request')
        await send_membership_message(update, context)


async def pause_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    logging.info('Setting pause on/off')

    db_user = _get_db_user(update, context)

    should_pause = not db_user.is_paused
    db_user.is_paused = should_pause
    context.user_data['is_paused'] = db_user.is_paused

    member = await _get_chat_member(update, context)

    db_helper.pause_user(should_pause, db_user)
    inline_markup = _menu_buttons(context, member, db_user)

    await update.effective_message.edit_reply_markup(inline_markup)

    await update.effective_message.reply_text(
        text='–°–∫—Ä—ã–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, —Å–Ω–∏–º–∏ —Å –ø–∞—É–∑—ã' if should_pause
        else '–û—Ç–∫—Ä—ã–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, —Ç—ã —Å–Ω–æ–≤–∞ —É—á–∞—Å—Ç–≤—É–µ—à—å'
    )

    logging.info('Done pause')


async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    await context.bot.send_message(
        chat_id=user_id,
        text='–ù–∞–ø–∏—à–∏, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —è –ø–µ—Ä–µ–¥–∞–º'
    )

    return FeedbackCallback.send


async def confirm_remove_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ù–∞–¥–æ", callback_data=RemoveProfileCallback.remove)],
        [InlineKeyboardButton("–ò –ø—Ä–∞–≤–¥–∞ –Ω–µ –Ω–∞–¥–æ", callback_data=RemoveProfileCallback.cancel)]
    ]

    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ú–æ–∂–µ—Ç –Ω–µ –Ω–∞–¥–æ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def remove_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    db_helper.delete_user(user_id)

    await update.effective_message.edit_reply_markup(None)
    await update.effective_message.edit_text('–£–¥–∞–ª–∏–ª. –ó–∞—Ö–æ–¥–∏ –µ—â–µ')

async def cancel_remove_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await update.effective_message.edit_reply_markup(None)
    await update.effective_message.edit_text('–û—Ç–º–µ–Ω–∏–ª')

async def send_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = '–û—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n' + '__________________\n\n' + update.message.text

    await context.bot.send_message(
        chat_id=FEEDBACK_CHAT_ID,
        text=message
    )
    await context.bot.send_message(chat_id=update.effective_user.id, text='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!')

    return ConversationHandler.END


async def generate_pairs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generate_pairs(update, context)


async def send_membership_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        text='–ù–∞–¥–æ –±—ã—Ç—å –≤ —Å—Ç–∞–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –°—Ö–æ–¥–∏ —Å—é–¥–∞ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å: https://boosty.to/m0rtymerr'
             '–ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —Ç–æ –≤—Å—Ç—É–ø–∏ –≤ –û–ú: –§–ª—É–¥–∏–ª–∫–∞'
    )

    return ConversationHandler.END


# Private

def _get_db_user(update, context) -> User:
    current_db_user = db_helper.get_user(str(update.effective_user.id))

    if current_db_user is not None:
        context.user_data['is_paused'] = current_db_user.is_paused

    return current_db_user


async def _get_chat_member(update, context) -> ChatMember:
    chat_member = await context.bot.get_chat_member(chat_id=MEMBERSHIP_CHAT_ID, user_id=update.effective_user.id)

    return chat_member


def _menu_buttons(context, member, db_user) -> InlineKeyboardMarkup:
    reply_keyboard: list[list[InlineKeyboardButton]] = []

    if db_user is not None:
        reply_keyboard.append(
            [InlineKeyboardButton('üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data=MenuCallback.fill_profile)]
        )

        if not db_user.is_paused:
            reply_keyboard.append(
                [InlineKeyboardButton(text='‚è∏Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É', callback_data=MenuCallback.pause)]
            )
        else:
            reply_keyboard.append(
                [InlineKeyboardButton(text='‚ñ∂Ô∏è –°–Ω—è—Ç—å —Å –ø–∞—É–∑—ã', callback_data=MenuCallback.pause)]
            )

        reply_keyboard.append(
            [InlineKeyboardButton(text='üí° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data=MenuCallback.send_feedback)]
        )

        reply_keyboard.append(
            [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data=RemoveProfileCallback.confirm)]
        )
    else:
        reply_keyboard.append(
            [InlineKeyboardButton('üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data=MenuCallback.fill_profile)]
        )

    if str(member.user.id) in ADMIN_ACCOUNTS:
        logging.info(f'{member.user.id} is admin. adding generate pairs handler...')
        reply_keyboard.append(
            [InlineKeyboardButton(text='üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã', callback_data=MenuCallback.generate_pairs)]
        )
        context.application.add_handler(
            CallbackQueryHandler(callback=generate_pairs_handler, pattern=f"{MenuCallback.generate_pairs}")
        )

    return InlineKeyboardMarkup(inline_keyboard=reply_keyboard)
